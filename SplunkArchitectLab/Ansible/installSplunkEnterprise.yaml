---
- name: Install Splunk Enterprise
  hosts: ALL
  remote_user: ec2-user
  vars:
    sudoers:
      - ec2-user

  tasks:
  - name: Make sure we have a 'wheel' group
    become: true
    become_method: su
    become_exe: sudo su -
    become_user: root     
    group:
      name: wheel
      state: present

  - name: Allow 'wheel' group to have passwordless sudo
    become: true
    become_method: su
    become_exe: sudo su -
    become_user: root    
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: visudo -cf %s

  - name: Add sudoers users to wheel group
    user:
      name: "{{ item }}"
      groups: wheel
      append: yes
    with_items: "{{ sudoers }}"

  - name: Copy Splunk Enterprise 9.0.7
    become: true
    become_method: su
    become_exe: sudo su -
    become_user: root  
    copy:
      src: /home/ec2-user/splunk-9.0.7-b985591d12fd-Linux-x86_64.tgz
      dest: /opt/splunk-9.0.7-b985591d12fd-Linux-x86_64.tgz

  - name: change /opt ownership to ec2-user:ec2-user
    become: true
    become_method: su
    become_exe: sudo su -
    become_user: root  
    shell: |
      chown -R ec2-user:ec2-user /opt; 

  - name: first install
    become: true
    become_user: ec2-user
    shell: |
      if [ -d "/opt/splunk" ] 
      then
        echo "/opt/splunk does exist."
      else
        echo "untarring splunk file"
        cd /opt/ && tar -xzf splunk-9.0.7-b985591d12fd-Linux-x86_64.tgz;
        sudo chown -R ec2-user:ec2-user /opt;
        cd /opt/splunk/bin/; 
        mkdir -p /opt/tmp; 
      fi
      
  - name: Copy splunk initd script
    become: true
    become_method: su
    become_user: ec2-user  
    copy:
      src: /home/ec2-user/cloud9_rceovery/SplunkArchitectLab/Ansible/etc/init.d/splunk
      dest: /opt/tmp/initd.splunk
      mode: 700


     

###############
- name: hostgroup searchhead etc/system/local initial files
  hosts: searchhead
  remote_user: ec2-user
  tasks:
  - name: Copy system local files
    become: true
    become_method: su
    become_user: ec2-user  
    copy:
      src: /home/ec2-user/cloud9_rceovery/SplunkArchitectLab/Ansible/system_local/searchhead/
      dest: /opt/tmp/
      mode: 600
      owner: ec2-user
      
  - name: check and copy files if needed and start up splunk first time
    become: true
    become_user: ec2-user
    register: out
    shell: |
      if [ -f "/opt/splunk/etc/system/local/inputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/inputs.conf does exist."
      else
        cp -p /opt/tmp/inputs.conf /opt/splunk/etc/system/local/inputs.conf
      fi  

      if [ -f "/opt/splunk/etc/system/local/outputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/outputs.conf does exist."
      else
        cp -p /opt/tmp/outputs.conf /opt/splunk/etc/system/local/outputs.conf
      fi

      if [ -f "/opt/splunk/etc/system/local/server.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/server.conf does exist."
      else
        cp -p /opt/tmp/server.conf /opt/splunk/etc/system/local/server.conf
        sudo chown -R ec2-user:ec2-user /opt;
        /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd "j3wTkjMb+Aj/geAF";
      fi

  - debug: var=out.stdout_lines  

  - name: enable boot start as ec2-user
# https://docs.splunk.com/Documentation/Splunk/9.2.0/Admin/ConfigureSplunktostartatboottime
    become: true
    become_user: ec2-user
    shell: |
      grep_USER_initd=$(sudo grep USER /etc/init.d/splunk | wc -l)
      if [[ grep_USER_initd -eq 5 ]] 
      then
        echo "Already configured to boot start as ec2-user"
      else
        sudo /opt/splunk/bin/splunk enable boot-start -user ec2-user;
        sudo chown -R ec2-user:ec2-user /opt;
        sudo chown root:root /opt/tmp/initd.splunk
        sudo chmod 0700 /opt/tmp/initd.splunk
        sudo cp -p /opt/tmp/initd.splunk /etc/init.d/splunk
      fi       
  
########################### 
###############
- name: hostgroup ds-lm-mc etc/system/local initial files
  hosts: ds-lm-mc
  remote_user: ec2-user
  tasks:
  
  - name: Copy system local files
    become: true
    become_method: su
    become_user: ec2-user  
    copy:
      src: /home/ec2-user/cloud9_rceovery/SplunkArchitectLab/Ansible/system_local/ds-lm-mc/
      dest: /opt/tmp/
      mode: 600
      owner: ec2-user
      
  - name: check and copy files if needed and start splunk
    become: true
    become_user: ec2-user
    register: out
    shell: |
      if [ -f "/opt/splunk/etc/system/local/inputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/inputs.conf does exist."
      else
        cp -p /opt/tmp/inputs.conf /opt/splunk/etc/system/local/inputs.conf
      fi  

      if [ -f "/opt/splunk/etc/system/local/outputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/outputs.conf does exist."
      else
        cp -p /opt/tmp/outputs.conf /opt/splunk/etc/system/local/outputs.conf
      fi

      if [ -f "/opt/splunk/etc/system/local/server.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/server.conf does exist."
      else
        cp -p /opt/tmp/server.conf /opt/splunk/etc/system/local/server.conf
        sudo chown -R ec2-user:ec2-user /opt;
        /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd "j3wTkjMb+Aj/geAF";
      fi

      
  - debug: var=out.stdout_lines   

  - name: enable boot start as ec2-user
    # https://docs.splunk.com/Documentation/Splunk/9.2.0/Admin/ConfigureSplunktostartatboottime
    become: true
    become_user: ec2-user
    shell: |
      grep_USER_initd=$(sudo grep USER /etc/init.d/splunk | wc -l)
      if [[ grep_USER_initd -eq 5 ]] 
      then
        echo "Already configured to boot start as ec2-user"
      else
        sudo /opt/splunk/bin/splunk enable boot-start -user ec2-user;
        sudo chown -R ec2-user:ec2-user /opt;
        sudo chown root:root /opt/tmp/initd.splunk
        sudo chmod 0700 /opt/tmp/initd.splunk
        sudo cp -p /opt/tmp/initd.splunk /etc/init.d/splunk
      fi     
      
########################### 
###############
- name: hostgroup cm etc/system/local initial files
  hosts: cm
  remote_user: ec2-user
  tasks:
  
  - name: Copy system local files
    become: true
    become_method: su
    become_user: ec2-user  
    copy:
      src: /home/ec2-user/cloud9_rceovery/SplunkArchitectLab/Ansible/system_local/cm/
      dest: /opt/tmp/
      mode: 600
      owner: ec2-user
      
  - name: check and copy files if needed and start splunk
    become: true
    become_user: ec2-user
    register: out
    shell: |
      if [ -f "/opt/splunk/etc/system/local/inputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/inputs.conf does exist."
      else
        cp -p /opt/tmp/inputs.conf /opt/splunk/etc/system/local/inputs.conf
      fi  

      if [ -f "/opt/splunk/etc/system/local/outputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/outputs.conf does exist."
      else
        cp -p /opt/tmp/outputs.conf /opt/splunk/etc/system/local/outputs.conf
      fi

      if [ -f "/opt/splunk/etc/system/local/server.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/server.conf does exist."
      else
        cp -p /opt/tmp/server.conf /opt/splunk/etc/system/local/server.conf
        sudo chown -R ec2-user:ec2-user /opt;
        /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd "j3wTkjMb+Aj/geAF";
      fi        
  - debug: var=out.stdout_lines   

  - name: enable boot start as ec2-user
    # https://docs.splunk.com/Documentation/Splunk/9.2.0/Admin/ConfigureSplunktostartatboottime
    become: true
    become_user: ec2-user
    shell: |
      grep_USER_initd=$(sudo grep USER /etc/init.d/splunk | wc -l)
      if [[ grep_USER_initd -eq 5 ]] 
      then
        echo "Already configured to boot start as ec2-user"
      else
        sudo /opt/splunk/bin/splunk enable boot-start -user ec2-user;
        sudo chown -R ec2-user:ec2-user /opt;
        sudo chown root:root /opt/tmp/initd.splunk
        sudo chmod 0700 /opt/tmp/initd.splunk
        sudo cp -p /opt/tmp/initd.splunk /etc/init.d/splunk
      fi     
      
########################### 
###############
- name: hostgroup indexers etc/system/local initial files
  hosts: indexers
  remote_user: ec2-user
  tasks:
  
  - name: Copy system local files
    become: true
    become_method: su
    become_user: ec2-user  
    copy:
      src: /home/ec2-user/cloud9_rceovery/SplunkArchitectLab/Ansible/system_local/indexers/
      dest: /opt/tmp/
      mode: 600
      owner: ec2-user
      
  - name: check and copy files if needed
    become: true
    become_user: ec2-user
    register: out
    shell: |
      if [ -f "/opt/splunk/etc/system/local/inputs.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/inputs.conf does exist."
      else
        cp -p /opt/tmp/inputs.conf /opt/splunk/etc/system/local/inputs.conf
      fi  

      if [ -f "/opt/splunk/etc/system/local/server.conf" ] 
      then
        echo "/opt/splunk/etc/system/local/server.conf does exist."
      else
        cp -p /opt/tmp/server.conf /opt/splunk/etc/system/local/server.conf
        sudo chown -R ec2-user:ec2-user /opt;
        /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt --seed-passwd "j3wTkjMb+Aj/geAF";
      fi        
  - debug: var=out.stdout_lines   

  - name: enable boot start as ec2-user
    # https://docs.splunk.com/Documentation/Splunk/9.2.0/Admin/ConfigureSplunktostartatboottime
    become: true
    become_user: ec2-user
    shell: |
      grep_USER_initd=$(sudo grep USER /etc/init.d/splunk | wc -l)
      if [[ grep_USER_initd -eq 5 ]] 
      then
        echo "Already configured to boot start as ec2-user"
      else
        sudo /opt/splunk/bin/splunk enable boot-start -user ec2-user;
        sudo chown -R ec2-user:ec2-user /opt;
        sudo chown root:root /opt/tmp/initd.splunk
        sudo chmod 0700 /opt/tmp/initd.splunk
        sudo cp -p /opt/tmp/initd.splunk /etc/init.d/splunk
      fi       
########################### 



- name: Start Splunk
  hosts: ALL
  remote_user: ec2-user
  vars:
    sudoers:
      - ec2-user

  tasks:

  - name: Check and start Splunk Service
    become: true
    register: out
    become_user: ec2-user
    shell: |
      echo $(whoami)
      if [[ $(whoami) == "ec2-user" ]]
      
      then
        splunkd_is_running=$(/opt/splunk/bin/splunk status|grep 'splunkd is running'|wc -l)

        if [[ splunkd_is_running -eq 1 ]]
        
        then
          echo "do nothing"
        
        else
          sudo chown -R ec2-user:ec2-user /opt;
          /opt/splunk/bin/splunk start;
        
        fi  
        
      fi  
  - debug: var=out.stdout_lines  
  
  