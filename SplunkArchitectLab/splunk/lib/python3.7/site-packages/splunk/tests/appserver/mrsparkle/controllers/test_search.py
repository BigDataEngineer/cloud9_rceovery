import unittest
import os
from splunk.appserver.mrsparkle.controllers import search
from slim.utils.internal import string

SPLUNK_HOME = string(os.environ['SPLUNK_SOURCE'])
CONTROLLER_PATH = os.path.join(SPLUNK_HOME, 'py', '3', 'splunk', 'tests', 'appserver', 'mrsparkle', 'controllers')

class TestSearch(unittest.TestCase):
    def setUp(self):
        self.job = search.JobsController()

    def tearDown(self):
        pass

    def test_sanitize_filename(self):
        extensions = [
            'xml',
            'csv',
            'txt',
            'json'
        ]
        sid = "example_sid"
        # test no filename
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(None, sid, extensions[i]), "{}.{}".format(sid, extensions[i]))

        # test generic filename
        filename = 'test'
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(filename, sid, extensions[i]), "{}.{}".format(filename, extensions[i]))

        # test filename with an extension
        filename = 'test.exe'
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(filename, sid, extensions[i]), "{}.{}".format(filename, extensions[i]))
        
        # test sid period character is replaced with an underscore
        sid = "example.sid"
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(None, sid, extensions[i]), 'example_sid.{}'.format(extensions[i]))

    def test_get_xsl_file_meta_data_css(self):
        self.assertFalse(self.job.get_xsl_file_meta_data("tmp.css").get("is_valid_extension"), "check css file")

    def test_get_xsl_file_meta_data_xsl(self):
        self.assertTrue(self.job.get_xsl_file_meta_data("tmp.xsl").get("is_valid_extension"), "check xsl file")

    def test_get_xsl_file_meta_data_xslt(self):
        self.assertTrue(self.job.get_xsl_file_meta_data("tmp.xslt").get("is_valid_extension"), "check xslt file")

    def test_get_xsl_file_meta_data(self):
        self.assertFalse(self.job.get_xsl_file_meta_data("tmp").get("is_valid_extension"), "check without extension")

    def test_parse_xsl_file_and_validate_with_invalid_xsl(self):
        FILE_PATH = os.path.join(CONTROLLER_PATH, 'invalid.xsl')
        with self.assertRaises(Exception):
            self.job.parse_xsl_file_and_validate(FILE_PATH)

    def test_parse_xsl_file_and_validate_with_valid_xsl(self):
        FILE_PATH = os.path.join(CONTROLLER_PATH, 'valid.xsl')
        validated_xsl = self.job.parse_xsl_file_and_validate(FILE_PATH)
        self.assertTrue(validated_xsl["is_valid_xsl"], "check valid xsl")
        self.assertEqual(validated_xsl["output"], "", "check valid xsl output")

if __name__ == '__main__':
    unittest.main()
